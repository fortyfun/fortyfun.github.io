{"version":3,"sources":["Home.js","About.js","Topic.js","Tech.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","React","Component","About","Topic","this","match","params","topic","replace","JSON","stringify","Tech","to","url","path","render","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAeeA,E,kDAZb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,wC,GARaC,IAAMC,WCaVC,E,kDAZb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,yC,GARcC,IAAMC,WCgBXE,E,kDAfb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,sCAAYK,KAAKN,MAAMO,MAAMC,OAAOC,MAAMC,QAAQ,IAAK,MACvD,6BAAMC,KAAKC,UAAUN,KAAKN,MAAMO,a,GAVpBL,IAAMC,WCyCXU,E,kDAlCb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,oCAEA,4BACE,4BACE,kBAAC,IAAD,CAAMa,GAAE,UAAKR,KAAKN,MAAMO,MAAMQ,IAAtB,YAAR,WAIF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKR,KAAKN,MAAMO,MAAMQ,IAAtB,kBAAR,kBAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKV,KAAKN,MAAMO,MAAMS,KAAtB,WAAqCC,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAAUA,MAC9E,kBAAC,IAAD,CAAOgB,KAAMV,KAAKN,MAAMO,MAAMS,MAC5B,qDACA,6BAAML,KAAKC,UAAUN,KAAKN,MAAMO,e,GA3BzBL,IAAMC,WC4BVe,MAzBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMJ,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,UAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,SAASC,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAAUA,MACnD,kBAAC,IAAD,CAAOgB,KAAK,QAAQC,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAASA,MACjD,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAASA,UCjBnCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec20dbce.chunk.js","sourcesContent":["import React from 'react';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <h2>home</h2>\n    )\n  }\n}\n\nexport default Home;","import React from 'react';\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <h2>about</h2>\n    )\n  }\n}\n\nexport default About;","import React from 'react';\n\nclass Topic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>topic: {this.props.match.params.topic.replace('-', ' ')}</h3>\n        <pre>{JSON.stringify(this.props.match)}</pre>\n      </div>\n    )\n  }\n}\n\nexport default Topic;","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Topic from './Topic';\n\nclass Tech extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>tech</h2>\n\n        <ul>\n          <li>\n            <Link to={`${this.props.match.url}/models`}>\n              models\n            </Link>\n          </li>\n          <li>\n            <Link to={`${this.props.match.url}/colour-codes`}>\n              colour codes\n            </Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route path={`${this.props.match.path}/:topic`} render={(props) => <Topic {...props} />} />\n          <Route path={this.props.match.path}>\n            <h3>Please select a tech.</h3>\n            <pre>{JSON.stringify(this.props.match)}</pre>\n          </Route>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default Tech;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\nimport Tech from './Tech';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">about</Link>\n          </li>\n          <li>\n            <Link to=\"/tech\">tech</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/about\" render={(props) => <About {...props} />} />\n          <Route path=\"/tech\" render={(props) => <Tech {...props} />} />\n          <Route path=\"/\" render={(props) => <Home {...props} />} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}